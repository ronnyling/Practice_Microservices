package SampleA;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import org.springframework.web.client.RestTemplate;

import java.io.IOException;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/rankingProfile") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	@Autowired
	private StaffRepository staffRepository;
	RestTemplate restTemplate = new RestTemplate();
	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		User n = new User();
		n.setName(name);
		n.setEmail(email);
			userRepository.save(n);
		return "Saved";
	}
	
	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	@Autowired
	@GetMapping(path="/task1")
	public @ResponseBody String retrieveStaffInfo() {
		// This returns a JSON or XML with the users
			System.out.println("im inside getmapping");
		try{
			Staff istaff;
			istaff = staffRepository.getStaffInfo();
			return (istaff.getFName());
			}catch(NullPointerException e){
			return "Either cant call database(code issue) or controller issue";
		}
		//
	}

	@GetMapping(path="/task1.1/{location}")
	public @ResponseBody Staff retrieveStaffInfo_byBranchID(@PathVariable String location)throws IOException {
		try{
			Staff istaff;
			istaff = staffRepository.getStaffInfo_byBranchID(location);
			return (istaff);
		}catch(NullPointerException e){
			return null;
		}
		//
	}
	@GetMapping(path="/task2/{staffName}")
	public @ResponseBody String getSalesRecord(@PathVariable String staffName)throws IOException {
		// This returns a JSON or XML with the users
		String url ="http://localhost:8090/demo/salesrecord/{uri}";
		try {
			restTemplate.getMessageConverters().add(new StringHttpMessageConverter());
			String result = restTemplate.getForObject(url, String.class,staffName);
			return result;
		}catch (NullPointerException e){
			return "Caught nothing";
		}

	}

	@PostMapping(path="/task3")
	public @ResponseBody String registerStaff(@RequestParam Integer eID
			, @RequestParam String fName, @RequestParam String lName, @RequestParam String gender
			, @RequestParam Integer age, @RequestParam String email, @RequestParam String jobTitle
			, @RequestParam String careerLvl, @RequestParam String location) {
		staffRepository.registerStaff(eID,fName,lName,gender,age,email	,jobTitle,careerLvl,location);
		return ("Staff info saved");
	}
	@PutMapping(path="/task4")
	public @ResponseBody String updateBranchID(@RequestParam Integer eID,@RequestBody Staff updateStaff) {
		String location=updateStaff.getLocation();
		staffRepository.updateBranchID(location,eID);
		return ("Updated Branch ID of eID " + eID);
	}
	@DeleteMapping(path="/task5")
	public @ResponseBody String deregister(@RequestParam Integer eID) {
		staffRepository.deleteStaff(eID);
		return ("Deleted Branch ID of eID " + eID);
	}


}
